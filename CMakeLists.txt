cmake_minimum_required(VERSION 3.16)

# Nom du projet
project(pharma_project LANGUAGES CXX)

# Utiliser C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Dossiers de sortie
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)

# Activer la g√©n√©ration automatique pour Qt (MOC, UIC, RCC)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# ---------------------------------------------------------------
# üîç Trouver Qt
# ---------------------------------------------------------------
# Si Qt n‚Äôest pas trouv√© automatiquement, passer le chemin lors du cmake :
# cmake -DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/qt5 ..
find_package(Qt5 COMPONENTS Core Gui Widgets REQUIRED)

# ---------------------------------------------------------------
# üìÇ Inclure les dossiers du projet
# ---------------------------------------------------------------
include_directories(
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/src
)

# ---------------------------------------------------------------
# üß† D√©finir les fichiers sources
# ---------------------------------------------------------------
file(GLOB_RECURSE PROJECT_SOURCES
    src/*.cpp
    src/ui/*.cpp
    src/ml_interface/*.cpp
    include/*.h
)

# ---------------------------------------------------------------
# üèóÔ∏è Cr√©er l‚Äôex√©cutable
# ---------------------------------------------------------------
add_executable(${PROJECT_NAME}
    ${PROJECT_SOURCES}
)

# ---------------------------------------------------------------
# üîó Lier les d√©pendances Qt
# ---------------------------------------------------------------
target_link_libraries(${PROJECT_NAME}
    PRIVATE
    Qt5::Core
    Qt5::Gui
    Qt5::Widgets
)

# ---------------------------------------------------------------
# üß¨ Support Python (si tu veux ex√©cuter des scripts depuis C++)
# ---------------------------------------------------------------
# Exemple : utilisation de Python pour ex√©cuter des scripts ML
find_package(Python3 COMPONENTS Interpreter REQUIRED)
target_include_directories(${PROJECT_NAME} PRIVATE ${Python3_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PRIVATE ${Python3_LIBRARIES})

# ---------------------------------------------------------------
# üì¶ Ajouter un dossier cmake/ (si tu veux d√©finir des modules persos)
# ---------------------------------------------------------------
#list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

# ---------------------------------------------------------------
# ‚úÖ Tests (optionnel)
# ---------------------------------------------------------------
#enable_testing()
#add_subdirectory(tests)

# ---------------------------------------------------------------
# üìú Affichage d‚Äôun r√©sum√© clair
# ---------------------------------------------------------------
message(STATUS "--------------------------------------------------")
message(STATUS "‚úÖ Configuration de ${PROJECT_NAME}")
message(STATUS "  - Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  - Output dir: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
message(STATUS "  - Qt version : ${Qt5Core_VERSION}")
message(STATUS "  - Python path: ${Python3_EXECUTABLE}")
message(STATUS "--------------------------------------------------")
